import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'eclipse'
    id 'maven-publish'
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.0-SNAPSHOT" apply false
}

apply plugin: 'java'
apply plugin: 'architectury-plugin'
apply plugin: 'maven-publish'
apply plugin: 'dev.architectury.loom'

group = 'cx.rain.iadfu' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'iadfu'

version = '1.19.2-1.0.0'
/*
if (System.getenv("CI") == "true") {
    version += "-${System.getenv("CIRCLE_BRANCH")}"
    version += "-${System.getenv("CIRCLE_SHA1").substring(0, 7)}"
    version += "-${System.getenv("CIRCLE_BUILD_NUM")}"

    if (System.getenv("CIRCLE_PR_USERNAME") != null) {
        version += "-pr-${System.getenv("CIRCLE_PR_USERNAME")}"
    }

    if (System.getenv("CIRCLE_PR_NUMBER") != null) {
        version += "-#${System.getenv("CIRCLE_PR_NUMBER")}"
    }
}
*/
var release = false
if (release || (project.hasProperty("IA_RELEASE") && project.property("IA_RELEASE") == 'true')) {
    version += '-release'
} else {
    version += '-dev'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    silentMojangMappingsLicense()

    forge {
        dataGen {
            mod 'iadfu'
        }

        mixinConfig 'mixin.iadfu.json'
    }

//    runs {
//        data {
//            programArg "--existing ${file("src/main/resources").absolutePath}"
//        }
//    }
}

dependencies {
    minecraft "com.mojang:minecraft:1.19.2"
    forge "net.minecraftforge:forge:1.19.2-43.1.32"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.19.2:2022.08.28@zip")
    }

    if (!release) {
        // Dev libs here.
    }
}

jar {
    archiveClassifier.set('')

    manifest {
        attributes([
                "Specification-Title"     : "iadfu",
                "Specification-Vendor"    : "qyl27",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "qyl27",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

allprojects {
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    println "Java: ${System.getProperty 'java.version'}, " +
            "JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), " +
            "Arch: ${System.getProperty 'os.arch'}"

    sourceSets.main.resources {
        srcDir 'src/generated/resources'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    }

    repositories {
        flatDir {
            dir 'libs'
        }

        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }

        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }
}

task injectString(type: Copy) {
    from ('src/main/java') {
        include '**/*.java'
        filter(ReplaceTokens, tokens: [
                version: project.version,
                dataVersion: "1"
        ])
    }
    into "${buildDir}/generated/java"
}
compileJava.source = "${buildDir}/generated/java"
compileJava.dependsOn injectString
